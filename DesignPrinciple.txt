[STRATEGY PATTERN]
Definition:
    The Strategy Pattern defines a family of algorithms, encapsulates each one,
    and makes them interchangeable. Strategy lets the algorithm vary
    independently from clients that use it.

1.  Identify the aspects of your application that vary and separate them from
    what stays the same.
2.  Program to an interface, not an implementation.
3.  Favor composition over inheritance.

[OBSERVER PATTERN]
Definition:
    The Observer Pattern defines a one-to-many dependency between objects so
    that when one object changes state, all of its dependents are notified and
    updated automatically.

1.  Strive for loosely coupled designs between objects that interact.

[DECORATOR PATTERN]
Definition:
    The Decorator Pattern attaches additional responsibilities to an object
    dynamically. Decorators provide a flexible alternative to sub-classing for
    extending functionality.

1. Classes should be open for extension but closed for modification.

[FACTORY METHOD PATTERN]
Definition:
    The Factory Method Pattern defines an interface for creating an object,
    but lets subclasses decide which class to instantiate. Factory Method lets
    a class defer instantiation to subclasses.

1.  Depend upon abstractions. Do not depend upon concrete classes.

[ABSTRACT FACTORY PATTERN]
Definition:
    The Abstract Factory Pattern provides an interface for creating families
    of related or dependent objects without specifying their concrete classes.
