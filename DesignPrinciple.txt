[OBJECT ORIENTED PRINCIPLES]
1.  Encapsulate what varies.
2.  Favor composition over inheritance.
2.  Program to an interface, not an implementation.
3.  Favor composition over inheritance.
4.  Strive for loosely coupled designs between objects that interact.
5.  Classes should be open for extension but closed for modification.
6.  Depend upon abstractions. Do not depend upon concrete classes.
7.  Talk only to your friends.
8.  Don't call us, we'll call you.
9. A class should have only one reason to change.

[OBJECT ORIENTED PATTERNS]
[Strategy Pattern] - Defines a family of algorithms, encapsulates each one,
and makes them interchangeable. Strategy lets the algorithm vary independently
from clients that use it.

[Observer Pattern] - Defines a one-to-many dependency between objects so that
when one object changes state, all of its dependents are notified and updated
automatically.

[Decorator Pattern] - Attaches additional responsibilities to an object
dynamically. Decorators provide a flexible alternative to sub-classing for
extending functionality.

[Factory Method Pattern] - Defines an interface for creating an object,
but lets subclasses decide which class to instantiate. Factory Method lets
a class defer instantiation to subclasses.

[Abstract Factory Pattern] - Provides an interface for creating families of
related or dependent objects without specifying their concrete classes.

[Singleton Pattern] - Ensures a class has only one instance, and provides a
global point of access to it.

[Command Pattern] - Encapsulates a request as an object, thereby letting you
parameterize clients with different requests, queue or log requests, and support
undoable operations.

[Adapter Pattern] - Converts the interface of a class into another interface
clients expect. Lets classes work together that couldn't otherwise because of
incompatible interfaces.

[Facade Pattern] - Provides a unified interface to a set of interfaces in a
subsystem. Facade defines a higher-level interface that makes the subsystem
easier to use.

[Template Method Pattern] - Defines the skeleton of an algorithm in a method,
deferring some steps to subclasses. Template Method lets subclasses redefine
certain steps of an algorithm without changing the algorithm's structure.

[Iterator Pattern] - Provides a way to access the elements of an aggregate
object sequentially without exposing its underlying representation.

[Composite Pattern] - Compose objects into tree structures to represent
part-whole hierarchies. Composite lets clients treat individual objects and
compositions of objects uniformly.
